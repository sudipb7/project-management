generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String  @id @default(cuid())
  name     String
  image    String?
  password String?
  userId   String  @unique @map("user_id")
  email    String  @unique

  members Member[]
  invites Invite[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Member {
  id          String     @id @default(cuid())
  role        MemberRole @default(MEMBER)
  profileId   String     @map("user_id")
  workspaceId String     @map("workspace_id")

  invites Invite[]

  profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([profileId, workspaceId])
  @@map("members")
}

model Workspace {
  id          String              @id @default(cuid())
  name        String
  image       String?
  description String?
  visibility  WorkspaceVisibility @default(PUBLIC)

  channels Channel[]
  members  Member[]
  invites  Invite[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("workspaces")
}

model Channel {
  id          String      @id @default(cuid())
  name        String
  description String
  workspaceId String      @map("workspace_id")
  type        ChannelType @default(GENERAL)

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([workspaceId])
  @@map("channels")
}

model Invite {
  id          String       @id @default(cuid())
  profileId   String       @map("profile_id")
  memberId    String       @map("member_id")
  workspaceId String       @map("workspace_id")
  code        String       @unique
  status      InviteStatus @default(PENDING)

  profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  member    Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([profileId])
  @@index([memberId])
  @@index([workspaceId])
  @@map("invites")
}

enum MemberRole {
  ADMIN
  MEMBER
}

enum WorkspaceVisibility {
  PUBLIC
  PRIVATE
}

enum ChannelType {
  GENERAL
  ANNOUCEMENT
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}
